-- =============== EXTENSIONS ===============
create extension if not exists "uuid-ossp";

-- =============== PROFILES ===============
create table if not exists profiles (
  id uuid primary key default uuid_generate_v4(),
  telegram_id bigint unique,
  wallet_pubkey text unique,
  username text unique,
  display_name text,
  avatar_url text,
  bio text,
  private boolean default false,
  followers int default 0,
  following int default 0,
  created_at timestamptz default now(),
  updated_at timestamptz
);

-- =============== FOLLOWS ===============
create table if not exists follows (
  id bigint generated by default as identity primary key,
  follower text not null,
  following text not null,
  created_at timestamptz default now()
);

-- =============== AI PREDICTIONS ===============
create table if not exists ai_predictions (
  id bigint generated by default as identity primary key,
  mint text not null,
  symbol text,
  score numeric,
  created_at timestamptz default now()
);

-- =============== TOKEN METRICS ===============
create table if not exists token_metrics (
  id bigint generated by default as identity primary key,
  mint text not null,
  symbol text,
  price numeric,
  volume_24h numeric,
  holders integer,
  inflow numeric,
  created_at timestamptz default now()
);

-- =============== TRANSACTIONS ===============
create table if not exists transactions (
  id bigint generated by default as identity primary key,
  wallet_pubkey text not null,
  signature text,
  type text,
  amount numeric,
  token text,
  created_at timestamptz default now()
);

-- =============== POLICIES ===============
alter table profiles enable row level security;
alter table follows enable row level security;
alter table ai_predictions enable row level security;
alter table token_metrics enable row level security;
alter table transactions enable row level security;

-- Public read access for non-sensitive data
create policy "Public read profiles" on profiles for select using (true);
create policy "Public read follows" on follows for select using (true);
create policy "Public read ai_predictions" on ai_predictions for select using (true);
create policy "Public read token_metrics" on token_metrics for select using (true);

-- Insert/update only by server key (backend)
create policy "Server insert profiles" on profiles for insert with check (auth.role() = 'service_role');
create policy "Server insert follows" on follows for insert with check (auth.role() = 'service_role');
create policy "Server insert ai_predictions" on ai_predictions for insert with check (auth.role() = 'service_role');
create policy "Server insert token_metrics" on token_metrics for insert with check (auth.role() = 'service_role');
create policy "Server insert transactions" on transactions for insert with check (auth.role() = 'service_role');
