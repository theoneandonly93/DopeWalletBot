"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/dex/trending";
exports.ids = ["pages/api/dex/trending"];
exports.modules = {

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fdex%2Ftrending&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fdex%2Ftrending.js&middlewareConfigBase64=e30%3D!":
/*!**********************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fdex%2Ftrending&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fdex%2Ftrending.js&middlewareConfigBase64=e30%3D! ***!
  \**********************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_dex_trending_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/dex/trending.js */ \"(api)/./pages/api/dex/trending.js\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_dex_trending_js__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_dex_trending_js__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/dex/trending\",\n        pathname: \"/api/dex/trending\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_dex_trending_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmRleCUyRnRyZW5kaW5nJnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGcGFnZXMlMkZhcGklMkZkZXglMkZ0cmVuZGluZy5qcyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDTDtBQUMxRDtBQUN3RDtBQUN4RDtBQUNBLGlFQUFlLHdFQUFLLENBQUMsdURBQVEsWUFBWSxFQUFDO0FBQzFDO0FBQ08sZUFBZSx3RUFBSyxDQUFDLHVEQUFRO0FBQ3BDO0FBQ08sd0JBQXdCLGdIQUFtQjtBQUNsRDtBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovL2RvcGV3YWxsZXQtZnJvbnRlbmQvPzczMDAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFnZXNBUElSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL3BhZ2VzLWFwaS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBob2lzdCB9IGZyb20gXCJuZXh0L2Rpc3QvYnVpbGQvdGVtcGxhdGVzL2hlbHBlcnNcIjtcbi8vIEltcG9ydCB0aGUgdXNlcmxhbmQgY29kZS5cbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIuL3BhZ2VzL2FwaS9kZXgvdHJlbmRpbmcuanNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgXCJkZWZhdWx0XCIpO1xuLy8gUmUtZXhwb3J0IGNvbmZpZy5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBob2lzdCh1c2VybGFuZCwgXCJjb25maWdcIik7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9kZXgvdHJlbmRpbmdcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9kZXgvdHJlbmRpbmdcIixcbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBhcmVuJ3QgdXNlZCBpbiBwcm9kdWN0aW9uLlxuICAgICAgICBidW5kbGVQYXRoOiBcIlwiLFxuICAgICAgICBmaWxlbmFtZTogXCJcIlxuICAgIH0sXG4gICAgdXNlcmxhbmRcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWdlcy1hcGkuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fdex%2Ftrending&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fdex%2Ftrending.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./pages/api/dex/trending.js":
/*!***********************************!*\
  !*** ./pages/api/dex/trending.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n//\n// Uses global `fetch` (available in Next.js) â€” do not import node-fetch to avoid duplicate global definitions.\n// DexScreener proxy for trending tokens (single clean implementation)\n// - Uses global fetch (Next.js runtime)\n// - Supports query params: ?limit, ?sort (volume|gainers), ?chain\n// - Filters to requested chain (default: solana)\n// - Enriches token metadata from Solana tokenlist when available\n// - In-memory caching to reduce outbound requests during dev\nconst DEX_API = process.env.DEX_API_URL || \"https://api.dexscreener.com/latest/dex\";\nconst SOL_TOKENLIST = \"https://raw.githubusercontent.com/solana-labs/token-list/main/src/tokens/solana.tokenlist.json\";\nconst CACHE = {\n    responses: {},\n    tokenlist: null,\n    tokenlistTs: 0,\n    logoMap: null\n};\nconst CG_CACHE = {\n    list: null,\n    listTs: 0,\n    prices: {},\n    pricesTs: {}\n};\nCG_CACHE.meta = {};\nconst COINGECKO_LIST_TTL = 1000 * 60 * 60; // 1h\nconst COINGECKO_PRICE_TTL = 1000 * 30; // 30s\nasync function loadCoinGeckoList() {\n    const now = Date.now();\n    if (CG_CACHE.list && now - CG_CACHE.listTs < COINGECKO_LIST_TTL) return CG_CACHE.list;\n    try {\n        const r = await fetch(\"https://api.coingecko.com/api/v3/coins/list\");\n        if (!r.ok) return null;\n        const j = await r.json();\n        // create a map by symbol uppercase -> id (first match wins)\n        const map = {};\n        for (const c of j || []){\n            try {\n                const sym = String(c.symbol || \"\").toUpperCase();\n                if (!map[sym]) map[sym] = c.id;\n            } catch (e) {}\n        }\n        CG_CACHE.list = map;\n        CG_CACHE.listTs = Date.now();\n        return map;\n    } catch (e) {\n        return null;\n    }\n}\nasync function getPriceFromCoinGecko(symbol, contractAddress) {\n    try {\n        const now = Date.now();\n        const key = (contractAddress || symbol || \"\").toLowerCase();\n        if (CG_CACHE.prices[key] && now - (CG_CACHE.pricesTs[key] || 0) < COINGECKO_PRICE_TTL) return CG_CACHE.prices[key];\n        // Attempt contract lookup for solana if contractAddress provided\n        if (contractAddress) {\n            try {\n                const r = await fetch(`https://api.coingecko.com/api/v3/coins/solana/contract/${contractAddress}`);\n                if (r.ok) {\n                    const j = await r.json();\n                    const usd = j.market_data?.current_price?.usd ?? null;\n                    if (usd !== null) {\n                        CG_CACHE.prices[key] = usd;\n                        CG_CACHE.pricesTs[key] = Date.now();\n                        return usd;\n                    }\n                }\n            } catch (e) {}\n        }\n        // Fallback: symbol -> id -> simple/price\n        const list = await loadCoinGeckoList();\n        if (list && symbol) {\n            const id = list[String(symbol).toUpperCase()];\n            if (id) {\n                const r = await fetch(`https://api.coingecko.com/api/v3/simple/price?ids=${encodeURIComponent(id)}&vs_currencies=usd`);\n                if (r.ok) {\n                    const j = await r.json();\n                    const usd = j[id]?.usd ?? null;\n                    if (usd !== null) {\n                        CG_CACHE.prices[key] = usd;\n                        CG_CACHE.pricesTs[key] = Date.now();\n                        return usd;\n                    }\n                }\n            }\n        }\n    } catch (e) {}\n    return null;\n}\n// Attempt to fetch authoritative token metadata (name/symbol) from CoinGecko\nasync function getCoinGeckoMeta(chain, contractAddress, fallbackSymbol) {\n    try {\n        const now = Date.now();\n        const key = `${chain}:${(contractAddress || \"\").toLowerCase()}`;\n        if (CG_CACHE.meta[key] && now - (CG_CACHE.meta[key].ts || 0) < 1000 * 60 * 10) {\n            return CG_CACHE.meta[key].data;\n        }\n        const platformMap = {\n            solana: \"solana\",\n            bsc: \"binance-smart-chain\",\n            bscscan: \"binance-smart-chain\",\n            ethereum: \"ethereum\",\n            polygon: \"polygon-pos\",\n            fantom: \"fantom\"\n        };\n        const platform = platformMap[chain] || chain;\n        // Try contract lookup (works for many supported platforms)\n        if (contractAddress) {\n            try {\n                const url = `https://api.coingecko.com/api/v3/coins/${encodeURIComponent(platform)}/contract/${encodeURIComponent(contractAddress)}`;\n                const r = await fetch(url);\n                if (r.ok) {\n                    const j = await r.json();\n                    const data = {\n                        name: j.name || null,\n                        symbol: j.symbol || null\n                    };\n                    CG_CACHE.meta[key] = {\n                        ts: Date.now(),\n                        data\n                    };\n                    return data;\n                }\n            } catch (e) {}\n        }\n        // Fallback: map by symbol -> id list and fetch simple coin data\n        const list = await loadCoinGeckoList();\n        if (list && fallbackSymbol) {\n            const id = list[String(fallbackSymbol).toUpperCase()];\n            if (id) {\n                try {\n                    const r2 = await fetch(`https://api.coingecko.com/api/v3/coins/${encodeURIComponent(id)}`);\n                    if (r2.ok) {\n                        const j2 = await r2.json();\n                        const data = {\n                            name: j2.name || null,\n                            symbol: j2.symbol || null\n                        };\n                        CG_CACHE.meta[key] = {\n                            ts: Date.now(),\n                            data\n                        };\n                        return data;\n                    }\n                } catch (e) {}\n            }\n        }\n        CG_CACHE.meta[key] = {\n            ts: Date.now(),\n            data: {\n                name: null,\n                symbol: null\n            }\n        };\n    } catch (e) {}\n    return {\n        name: null,\n        symbol: null\n    };\n}\nasync function loadTokenList() {\n    const now = Date.now();\n    if (CACHE.tokenlist && now - CACHE.tokenlistTs < 60000) return CACHE.tokenlist;\n    try {\n        const r = await fetch(SOL_TOKENLIST);\n        if (!r.ok) return null;\n        const j = await r.json();\n        const map = {};\n        for (const t of j.tokens || []){\n            try {\n                const key = String(t.address || \"\").toLowerCase();\n                if (key) map[key] = t;\n            } catch (e) {}\n        }\n        // build logo reverse-lookup map (filename or hash -> token meta)\n        const logoMap = {};\n        for (const t of j.tokens || []){\n            const maybe = t.logoURI || t.extensions?.logoURI || \"\";\n            if (!maybe) continue;\n            try {\n                const parts = String(maybe).split(\"/\");\n                let last = parts[parts.length - 1] || \"\";\n                // strip query\n                last = last.split(\"?\")[0] || last;\n                last = last.toLowerCase();\n                if (last) logoMap[last] = t;\n            } catch (e) {}\n        }\n        CACHE.tokenlist = map;\n        CACHE.logoMap = logoMap;\n        CACHE.tokenlistTs = Date.now();\n        return map;\n    } catch (err) {\n        return null;\n    }\n}\nasync function handler(req, res) {\n    try {\n        const { query } = req;\n        const limit = Math.min(Number(query.limit) || 100, 100);\n        const chain = (query.chain || \"solana\").toString().toLowerCase();\n        const sort = (query.sort || \"volume\").toString().toLowerCase();\n        const cacheKey = `${chain}:${sort}:${limit}`;\n        const now = Date.now();\n        if (CACHE.responses[cacheKey] && now - CACHE.responses[cacheKey].ts < 30000) {\n            return res.status(200).json({\n                data: CACHE.responses[cacheKey].data,\n                cached: true\n            });\n        }\n        // Try multiple upstream endpoints to be robust against DexScreener endpoint shapes.\n        const candidates = [\n            `${DEX_API}/${chain}`,\n            DEX_API,\n            \"https://api.dexscreener.com/token-boosts/top/v1\"\n        ];\n        let body = null;\n        let lastStatus = 0;\n        for (const url of candidates){\n            try {\n                const resp = await fetch(url, {\n                    headers: {\n                        \"User-Agent\": \"DopeWalletBot/1.0\"\n                    }\n                });\n                lastStatus = resp.status;\n                if (!resp.ok) {\n                    continue;\n                }\n                body = await resp.json();\n                break;\n            } catch (e) {\n                lastStatus = 500;\n                continue;\n            }\n        }\n        if (!body) return res.status(502).json({\n            error: \"DexScreener upstream error\",\n            status: lastStatus\n        });\n        // collect candidate pairs\n        let pairs = [];\n        if (Array.isArray(body)) pairs = body;\n        else if (Array.isArray(body.pairs)) pairs = body.pairs;\n        else {\n            for (const k of Object.keys(body || {})){\n                if (body[k]?.pairs && Array.isArray(body[k].pairs)) pairs = pairs.concat(body[k].pairs);\n            }\n        }\n        // Filter to requested chain by inspecting various hint fields\n        const filtered = (pairs || []).filter((p)=>{\n            const hints = [\n                p.chain,\n                p.chainId,\n                p.chainKey,\n                p.dex?.chain,\n                p.pair?.chain,\n                p.baseToken?.chain,\n                p.quoteToken?.chain\n            ].filter(Boolean).map(String).join(\" \").toLowerCase();\n            return hints.includes(chain);\n        });\n        // simple sorting\n        let sorted = filtered;\n        if (sort === \"volume\") sorted = filtered.sort((a, b)=>(Number(b.volume) || Number(b.volume_24h) || 0) - (Number(a.volume) || Number(a.volume_24h) || 0));\n        else if (sort === \"gainers\") sorted = filtered.sort((a, b)=>(Number(b.priceChange) || Number(b.change) || 0) - (Number(a.priceChange) || Number(a.change) || 0));\n        const tokenlist = await loadTokenList();\n        const rawSlice = (sorted || []).slice(0, limit);\n        const normalized = [];\n        // Build initial normalized entries (without async enrichment)\n        for (const it of rawSlice){\n            const address = it.tokenAddress || it.address || it.pairAddress || it.baseToken?.address || it.quoteToken?.address || it.id || \"\";\n            let logoURI = it.icon || it.logo || it.logoURI || it.tokenIcon || it.baseToken?.icon || it.quoteToken?.icon || \"\";\n            let symbol = it.symbol || it.tokenSymbol || it.token?.symbol || it.baseToken?.symbol || it.quoteToken?.symbol || it.name || \"\";\n            let name = it.name || it.tokenName || it.baseToken?.name || it.quoteToken?.name || \"\";\n            const lookupAddr = String(address || \"\").toLowerCase();\n            if ((!logoURI || !symbol) && tokenlist && lookupAddr && tokenlist[lookupAddr]) {\n                const meta = tokenlist[lookupAddr];\n                logoURI = logoURI || meta.logoURI || meta.extensions?.logoURI || \"\";\n                symbol = symbol || meta.symbol || meta.name || \"\";\n            }\n            // fallback: try logo filename/hash lookup from tokenlist (helps when upstream returns icon hash)\n            if ((!symbol || !logoURI) && CACHE.logoMap) {\n                try {\n                    let candidate = logoURI || \"\";\n                    // if candidate is short (a hash), use it; otherwise extract filename\n                    if (candidate && !candidate.startsWith(\"http\")) {\n                        candidate = String(candidate).toLowerCase();\n                    } else if (candidate.startsWith(\"http\")) {\n                        const parts = String(candidate).split(\"/\");\n                        candidate = (parts[parts.length - 1] || \"\").split(\"?\")[0].toLowerCase();\n                    }\n                    if (candidate && CACHE.logoMap[candidate]) {\n                        const m = CACHE.logoMap[candidate];\n                        logoURI = logoURI || m.logoURI || m.extensions?.logoURI || \"\";\n                        symbol = symbol || m.symbol || m.name || \"\";\n                    }\n                } catch (e) {}\n            }\n            const price = Number(it.priceUsd || it.price || it.tokenPrice || it.price_usd || it.baseToken?.price || 0) || 0;\n            const change24h = Number(it.priceChange || it.change || it.change_24h || it.price_change_percentage_24h || 0) || 0;\n            const volume24h = Number(it.volume || it.volume24h || it.volume_24h || it.quoteVolume || it.liquidity || 0) || 0;\n            if (!logoURI && address) logoURI = `https://cdn.dexscreener.com/token-images/${chain}/${address}`;\n            // Fallback name/symbol heuristics when upstream lacks them\n            const rawDesc = it.description || it.raw?.description || it.tokenDescription || \"\" || \"\";\n            const urlName = it.url || it.raw?.url || \"\" ? String(it.url || it.raw?.url).split(\"/\").filter(Boolean).pop() : \"\";\n            function guessFromText(text) {\n                if (!text) return \"\";\n                // prefer first token-like word\n                const cleaned = String(text).replace(/[\\n\\r]/g, \" \").trim();\n                const first = cleaned.split(/\\s|_|-|\\//).filter(Boolean)[0] || \"\";\n                const alpha = first.replace(/[^A-Za-z0-9]/g, \"\");\n                return alpha.toUpperCase().slice(0, 6);\n            }\n            const initialName = name || \"\";\n            const initialSymbol = symbol || \"\";\n            normalized.push({\n                address,\n                logoURI,\n                symbol: initialSymbol,\n                name: initialName,\n                price,\n                change24h,\n                volume24h,\n                raw: it\n            });\n        }\n        // Enrich entries with authoritative metadata from CoinGecko when possible (sequential to avoid API rate limits)\n        for (const entry of normalized){\n            try {\n                const lookupAddr = String(entry.address || \"\").toLowerCase();\n                let cgMeta = {\n                    name: null,\n                    symbol: null\n                };\n                // prefer tokenlist metadata already merged earlier (entry may have logoURI indicating tokenlist match)\n                if ((!entry.name || !entry.symbol) && lookupAddr && tokenlist && tokenlist[lookupAddr]) {\n                    const m = tokenlist[lookupAddr];\n                    if (m) {\n                        entry.name = entry.name || m.name || m.symbol || \"\";\n                        entry.symbol = entry.symbol || m.symbol || m.name || \"\";\n                        continue; // authoritative from tokenlist\n                    }\n                }\n                // Try CoinGecko contract lookup\n                if ((!entry.name || !entry.symbol) && entry.address) {\n                    cgMeta = await getCoinGeckoMeta(chain, entry.address, entry.symbol || entry.name);\n                    if (cgMeta) {\n                        if (cgMeta.name) entry.name = entry.name || cgMeta.name;\n                        if (cgMeta.symbol) entry.symbol = entry.symbol || cgMeta.symbol.toUpperCase();\n                        if (entry.name && entry.symbol) continue;\n                    }\n                }\n                // As a last resort, if still empty, use heuristics but keep them only if nothing authoritative found\n                if (!entry.symbol) entry.symbol = entry.name && entry.name.length <= 10 ? entry.name.toUpperCase().split(\" \")[0] : entry.address ? `${String(entry.address).slice(0, 4)}...` : \"\";\n                if (!entry.name) entry.name = entry.raw?.name || entry.raw?.tokenName || entry.raw?.description || \"\";\n            } catch (e) {\n            // ignore per-entry failures\n            }\n        }\n        CACHE.responses[cacheKey] = {\n            ts: Date.now(),\n            data: normalized\n        };\n        return res.status(200).json({\n            data: normalized,\n            cached: false\n        });\n    } catch (err) {\n        console.error(\"trending proxy error\", err);\n        return res.status(500).json({\n            error: String(err)\n        });\n    }\n} //\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/dex/trending.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fdex%2Ftrending&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fdex%2Ftrending.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();