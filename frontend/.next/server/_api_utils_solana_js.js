"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_api_utils_solana_js";
exports.ids = ["_api_utils_solana_js"];
exports.modules = {

/***/ "(api)/../utils/solana.js":
/*!**************************!*\
  !*** ../utils/solana.js ***!
  \**************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createWallet: () => (/* binding */ createWallet),\n/* harmony export */   getBalance: () => (/* binding */ getBalance),\n/* harmony export */   getConnection: () => (/* binding */ getConnection),\n/* harmony export */   sendSol: () => (/* binding */ sendSol)\n/* harmony export */ });\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @solana/web3.js */ \"@solana/web3.js\");\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bs58 */ \"bs58\");\n/* harmony import */ var tweetnacl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tweetnacl */ \"tweetnacl\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! crypto */ \"crypto\");\n\n\n\n\n\n// Lazily created connection. Don't create at module import time because\n// that will throw if RPC_URL is not set or invalid (causes server-side 500s\n// during import). Instead create when needed with a helpful error message.\nlet _connection = null;\nfunction getRpcUrl() {\n  const url = process.env.RPC_URL || process.env.NEXT_PUBLIC_RPC_URL;\n  return url;\n}\n\nfunction getConnection() {\n  if (_connection) return _connection;\n  const rpcUrl = getRpcUrl();\n  if (!rpcUrl || !(rpcUrl.startsWith('http://') || rpcUrl.startsWith('https://'))) {\n    throw new TypeError('RPC_URL is missing or invalid. Set process.env.RPC_URL to a valid http(s) RPC endpoint.');\n  }\n  _connection = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Connection(rpcUrl, 'confirmed');\n  return _connection;\n}\n\n// Export getConnection so routes can lazily obtain a connection when needed\n\n\n/**\n * Generate a new wallet (mnemonic + keypair)\n */\nconst createWallet = async () => {\n  // Try to dynamically import bip39. If it fails (network, bundler, CJS/Esm\n  // mismatch), fall back to generating a secure random seed so wallet\n  // creation still works without a mnemonic. Returning a null mnemonic\n  // signals the fallback to callers.\n  try {\n    const bip39 = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/bip39\"), __webpack_require__.e(\"vendor-chunks/@noble\")]).then(__webpack_require__.t.bind(__webpack_require__, /*! bip39 */ \"(api)/../node_modules/bip39/src/index.js\", 19));\n    const { mnemonicToSeedSync, generateMnemonic } = bip39;\n    const mnemonic = generateMnemonic();\n    const seed = mnemonicToSeedSync(mnemonic).slice(0, 32);\n    const keypair = _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Keypair.fromSeed(seed);\n    return {\n      mnemonic,\n      privateKey: bs58__WEBPACK_IMPORTED_MODULE_1__.encode(keypair.secretKey),\n      publicKey: keypair.publicKey.toBase58(),\n    };\n  } catch (err) {\n    // If bip39 import or usage fails, produce a secure random seed and\n    // derive a Solana keypair from it. This avoids hard failures when the\n    // environment can't load bip39 (e.g., bundler tries to download it).\n    // Note: there is no mnemonic in this fallback; callers should warn\n    // users to back up the private key.\n    console.warn('bip39 import failed; falling back to random seed wallet:', err && err.message);\n    const seed = crypto__WEBPACK_IMPORTED_MODULE_3__.randomBytes(32);\n    const keypair = _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Keypair.fromSeed(seed);\n    return {\n      mnemonic: null,\n      privateKey: bs58__WEBPACK_IMPORTED_MODULE_1__.encode(keypair.secretKey),\n      publicKey: keypair.publicKey.toBase58(),\n    };\n  }\n};\n\n/**\n * Get SOL balance\n */\nconst getBalance = async (pubkey) => {\n  const connection = getConnection();\n  const balance = await connection.getBalance(new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(pubkey));\n  return balance / _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.LAMPORTS_PER_SOL;\n};\n\n/**\n * Send SOL between wallets\n */\nconst sendSol = async (fromSecret, toAddress, amountSol) => {\n  const connection = getConnection();\n  const sender = _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Keypair.fromSecretKey(bs58__WEBPACK_IMPORTED_MODULE_1__.decode(fromSecret));\n  const transaction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Transaction().add(\n    _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.SystemProgram.transfer({\n      fromPubkey: sender.publicKey,\n      toPubkey: new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(toAddress),\n      lamports: amountSol * _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.LAMPORTS_PER_SOL,\n    })\n  );\n  const sig = await (0,_solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.sendAndConfirmTransaction)(connection, transaction, [sender]);\n  return sig;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi4vdXRpbHMvc29sYW5hLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBUXlCO0FBQ0Q7QUFDSztBQUNEOztBQUU1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQix1REFBVTtBQUM5QjtBQUNBOztBQUVBO0FBQ3lCOztBQUV6QjtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsNE9BQWU7QUFDdkMsWUFBWSx1Q0FBdUM7QUFDbkQ7QUFDQTtBQUNBLG9CQUFvQixvREFBTztBQUMzQjtBQUNBO0FBQ0Esa0JBQWtCLHdDQUFXO0FBQzdCO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0EsdUNBQXVDO0FBQ3ZDLGlCQUFpQiwrQ0FBa0I7QUFDbkMsb0JBQW9CLG9EQUFPO0FBQzNCO0FBQ0E7QUFDQSxrQkFBa0Isd0NBQVc7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLGtEQUFrRCxzREFBUztBQUMzRCxtQkFBbUIsNkRBQWdCO0FBQ25DOztBQUVBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSxpQkFBaUIsb0RBQU8sZUFBZSx3Q0FBVztBQUNsRCwwQkFBMEIsd0RBQVc7QUFDckMsSUFBSSwwREFBYTtBQUNqQjtBQUNBLG9CQUFvQixzREFBUztBQUM3Qiw0QkFBNEIsNkRBQWdCO0FBQzVDLEtBQUs7QUFDTDtBQUNBLG9CQUFvQiwwRUFBeUI7QUFDN0M7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2RvcGV3YWxsZXQtZnJvbnRlbmQvLi4vdXRpbHMvc29sYW5hLmpzP2YzMjIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29ubmVjdGlvbixcbiAgS2V5cGFpcixcbiAgTEFNUE9SVFNfUEVSX1NPTCxcbiAgUHVibGljS2V5LFxuICBUcmFuc2FjdGlvbixcbiAgU3lzdGVtUHJvZ3JhbSxcbiAgc2VuZEFuZENvbmZpcm1UcmFuc2FjdGlvbixcbn0gZnJvbSBcIkBzb2xhbmEvd2ViMy5qc1wiO1xuaW1wb3J0IGJzNTggZnJvbSBcImJzNThcIjtcbmltcG9ydCBuYWNsIGZyb20gXCJ0d2VldG5hY2xcIjtcbmltcG9ydCBjcnlwdG8gZnJvbSAnY3J5cHRvJztcblxuLy8gTGF6aWx5IGNyZWF0ZWQgY29ubmVjdGlvbi4gRG9uJ3QgY3JlYXRlIGF0IG1vZHVsZSBpbXBvcnQgdGltZSBiZWNhdXNlXG4vLyB0aGF0IHdpbGwgdGhyb3cgaWYgUlBDX1VSTCBpcyBub3Qgc2V0IG9yIGludmFsaWQgKGNhdXNlcyBzZXJ2ZXItc2lkZSA1MDBzXG4vLyBkdXJpbmcgaW1wb3J0KS4gSW5zdGVhZCBjcmVhdGUgd2hlbiBuZWVkZWQgd2l0aCBhIGhlbHBmdWwgZXJyb3IgbWVzc2FnZS5cbmxldCBfY29ubmVjdGlvbiA9IG51bGw7XG5mdW5jdGlvbiBnZXRScGNVcmwoKSB7XG4gIGNvbnN0IHVybCA9IHByb2Nlc3MuZW52LlJQQ19VUkwgfHwgcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfUlBDX1VSTDtcbiAgcmV0dXJuIHVybDtcbn1cblxuZnVuY3Rpb24gZ2V0Q29ubmVjdGlvbigpIHtcbiAgaWYgKF9jb25uZWN0aW9uKSByZXR1cm4gX2Nvbm5lY3Rpb247XG4gIGNvbnN0IHJwY1VybCA9IGdldFJwY1VybCgpO1xuICBpZiAoIXJwY1VybCB8fCAhKHJwY1VybC5zdGFydHNXaXRoKCdodHRwOi8vJykgfHwgcnBjVXJsLnN0YXJ0c1dpdGgoJ2h0dHBzOi8vJykpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUlBDX1VSTCBpcyBtaXNzaW5nIG9yIGludmFsaWQuIFNldCBwcm9jZXNzLmVudi5SUENfVVJMIHRvIGEgdmFsaWQgaHR0cChzKSBSUEMgZW5kcG9pbnQuJyk7XG4gIH1cbiAgX2Nvbm5lY3Rpb24gPSBuZXcgQ29ubmVjdGlvbihycGNVcmwsICdjb25maXJtZWQnKTtcbiAgcmV0dXJuIF9jb25uZWN0aW9uO1xufVxuXG4vLyBFeHBvcnQgZ2V0Q29ubmVjdGlvbiBzbyByb3V0ZXMgY2FuIGxhemlseSBvYnRhaW4gYSBjb25uZWN0aW9uIHdoZW4gbmVlZGVkXG5leHBvcnQgeyBnZXRDb25uZWN0aW9uIH07XG5cbi8qKlxuICogR2VuZXJhdGUgYSBuZXcgd2FsbGV0IChtbmVtb25pYyArIGtleXBhaXIpXG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVXYWxsZXQgPSBhc3luYyAoKSA9PiB7XG4gIC8vIFRyeSB0byBkeW5hbWljYWxseSBpbXBvcnQgYmlwMzkuIElmIGl0IGZhaWxzIChuZXR3b3JrLCBidW5kbGVyLCBDSlMvRXNtXG4gIC8vIG1pc21hdGNoKSwgZmFsbCBiYWNrIHRvIGdlbmVyYXRpbmcgYSBzZWN1cmUgcmFuZG9tIHNlZWQgc28gd2FsbGV0XG4gIC8vIGNyZWF0aW9uIHN0aWxsIHdvcmtzIHdpdGhvdXQgYSBtbmVtb25pYy4gUmV0dXJuaW5nIGEgbnVsbCBtbmVtb25pY1xuICAvLyBzaWduYWxzIHRoZSBmYWxsYmFjayB0byBjYWxsZXJzLlxuICB0cnkge1xuICAgIGNvbnN0IGJpcDM5ID0gYXdhaXQgaW1wb3J0KCdiaXAzOScpO1xuICAgIGNvbnN0IHsgbW5lbW9uaWNUb1NlZWRTeW5jLCBnZW5lcmF0ZU1uZW1vbmljIH0gPSBiaXAzOTtcbiAgICBjb25zdCBtbmVtb25pYyA9IGdlbmVyYXRlTW5lbW9uaWMoKTtcbiAgICBjb25zdCBzZWVkID0gbW5lbW9uaWNUb1NlZWRTeW5jKG1uZW1vbmljKS5zbGljZSgwLCAzMik7XG4gICAgY29uc3Qga2V5cGFpciA9IEtleXBhaXIuZnJvbVNlZWQoc2VlZCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1uZW1vbmljLFxuICAgICAgcHJpdmF0ZUtleTogYnM1OC5lbmNvZGUoa2V5cGFpci5zZWNyZXRLZXkpLFxuICAgICAgcHVibGljS2V5OiBrZXlwYWlyLnB1YmxpY0tleS50b0Jhc2U1OCgpLFxuICAgIH07XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIElmIGJpcDM5IGltcG9ydCBvciB1c2FnZSBmYWlscywgcHJvZHVjZSBhIHNlY3VyZSByYW5kb20gc2VlZCBhbmRcbiAgICAvLyBkZXJpdmUgYSBTb2xhbmEga2V5cGFpciBmcm9tIGl0LiBUaGlzIGF2b2lkcyBoYXJkIGZhaWx1cmVzIHdoZW4gdGhlXG4gICAgLy8gZW52aXJvbm1lbnQgY2FuJ3QgbG9hZCBiaXAzOSAoZS5nLiwgYnVuZGxlciB0cmllcyB0byBkb3dubG9hZCBpdCkuXG4gICAgLy8gTm90ZTogdGhlcmUgaXMgbm8gbW5lbW9uaWMgaW4gdGhpcyBmYWxsYmFjazsgY2FsbGVycyBzaG91bGQgd2FyblxuICAgIC8vIHVzZXJzIHRvIGJhY2sgdXAgdGhlIHByaXZhdGUga2V5LlxuICAgIGNvbnNvbGUud2FybignYmlwMzkgaW1wb3J0IGZhaWxlZDsgZmFsbGluZyBiYWNrIHRvIHJhbmRvbSBzZWVkIHdhbGxldDonLCBlcnIgJiYgZXJyLm1lc3NhZ2UpO1xuICAgIGNvbnN0IHNlZWQgPSBjcnlwdG8ucmFuZG9tQnl0ZXMoMzIpO1xuICAgIGNvbnN0IGtleXBhaXIgPSBLZXlwYWlyLmZyb21TZWVkKHNlZWQpO1xuICAgIHJldHVybiB7XG4gICAgICBtbmVtb25pYzogbnVsbCxcbiAgICAgIHByaXZhdGVLZXk6IGJzNTguZW5jb2RlKGtleXBhaXIuc2VjcmV0S2V5KSxcbiAgICAgIHB1YmxpY0tleToga2V5cGFpci5wdWJsaWNLZXkudG9CYXNlNTgoKSxcbiAgICB9O1xuICB9XG59O1xuXG4vKipcbiAqIEdldCBTT0wgYmFsYW5jZVxuICovXG5leHBvcnQgY29uc3QgZ2V0QmFsYW5jZSA9IGFzeW5jIChwdWJrZXkpID0+IHtcbiAgY29uc3QgY29ubmVjdGlvbiA9IGdldENvbm5lY3Rpb24oKTtcbiAgY29uc3QgYmFsYW5jZSA9IGF3YWl0IGNvbm5lY3Rpb24uZ2V0QmFsYW5jZShuZXcgUHVibGljS2V5KHB1YmtleSkpO1xuICByZXR1cm4gYmFsYW5jZSAvIExBTVBPUlRTX1BFUl9TT0w7XG59O1xuXG4vKipcbiAqIFNlbmQgU09MIGJldHdlZW4gd2FsbGV0c1xuICovXG5leHBvcnQgY29uc3Qgc2VuZFNvbCA9IGFzeW5jIChmcm9tU2VjcmV0LCB0b0FkZHJlc3MsIGFtb3VudFNvbCkgPT4ge1xuICBjb25zdCBjb25uZWN0aW9uID0gZ2V0Q29ubmVjdGlvbigpO1xuICBjb25zdCBzZW5kZXIgPSBLZXlwYWlyLmZyb21TZWNyZXRLZXkoYnM1OC5kZWNvZGUoZnJvbVNlY3JldCkpO1xuICBjb25zdCB0cmFuc2FjdGlvbiA9IG5ldyBUcmFuc2FjdGlvbigpLmFkZChcbiAgICBTeXN0ZW1Qcm9ncmFtLnRyYW5zZmVyKHtcbiAgICAgIGZyb21QdWJrZXk6IHNlbmRlci5wdWJsaWNLZXksXG4gICAgICB0b1B1YmtleTogbmV3IFB1YmxpY0tleSh0b0FkZHJlc3MpLFxuICAgICAgbGFtcG9ydHM6IGFtb3VudFNvbCAqIExBTVBPUlRTX1BFUl9TT0wsXG4gICAgfSlcbiAgKTtcbiAgY29uc3Qgc2lnID0gYXdhaXQgc2VuZEFuZENvbmZpcm1UcmFuc2FjdGlvbihjb25uZWN0aW9uLCB0cmFuc2FjdGlvbiwgW3NlbmRlcl0pO1xuICByZXR1cm4gc2lnO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/../utils/solana.js\n");

/***/ })

};
;